/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@-phone-name: 'Phone';
@-phone-x: 0px;
@-phone-y: 127px;
@-phone-offset-x: 0px;
@-phone-offset-y: -127px;
@-phone-width: 34px;
@-phone-height: 35px;
@-phone-total-width: 169px;
@-phone-total-height: 162px;
@-phone-image: '../img/sprite.png';
@-phone: 0px 127px 0px -127px 34px 35px 169px 162px '../img/sprite.png' 'Phone';
@discoball-name: 'discoball';
@discoball-x: 130px;
@discoball-y: 0px;
@discoball-offset-x: -130px;
@discoball-offset-y: 0px;
@discoball-width: 39px;
@discoball-height: 39px;
@discoball-total-width: 169px;
@discoball-total-height: 162px;
@discoball-image: '../img/sprite.png';
@discoball: 130px 0px -130px 0px 39px 39px 169px 162px '../img/sprite.png' 'discoball';
@left-name: 'left';
@left-x: 0px;
@left-y: 0px;
@left-offset-x: 0px;
@left-offset-y: 0px;
@left-width: 45px;
@left-height: 46px;
@left-total-width: 169px;
@left-total-height: 162px;
@left-image: '../img/sprite.png';
@left: 0px 0px 0px 0px 45px 46px 169px 162px '../img/sprite.png' 'left';
@mask-name: 'mask';
@mask-x: 130px;
@mask-y: 59px;
@mask-offset-x: -130px;
@mask-offset-y: -59px;
@mask-width: 39px;
@mask-height: 32px;
@mask-total-width: 169px;
@mask-total-height: 162px;
@mask-image: '../img/sprite.png';
@mask: 130px 59px -130px -59px 39px 32px 169px 162px '../img/sprite.png' 'mask';
@right-name: 'right';
@right-x: 65px;
@right-y: 0px;
@right-offset-x: -65px;
@right-offset-y: 0px;
@right-width: 45px;
@right-height: 46px;
@right-total-width: 169px;
@right-total-height: 162px;
@right-image: '../img/sprite.png';
@right: 65px 0px -65px 0px 45px 46px 169px 162px '../img/sprite.png' 'right';
@sexy-name: 'sexy';
@sexy-x: 0px;
@sexy-y: 66px;
@sexy-offset-x: 0px;
@sexy-offset-y: -66px;
@sexy-width: 40px;
@sexy-height: 41px;
@sexy-total-width: 169px;
@sexy-total-height: 162px;
@sexy-image: '../img/sprite.png';
@sexy: 0px 66px 0px -66px 40px 41px 169px 162px '../img/sprite.png' 'sexy';
@streamline-name: 'streamline';
@streamline-x: 60px;
@streamline-y: 66px;
@streamline-offset-x: -60px;
@streamline-offset-y: -66px;
@streamline-width: 40px;
@streamline-height: 40px;
@streamline-total-width: 169px;
@streamline-total-height: 162px;
@streamline-image: '../img/sprite.png';
@streamline: 60px 66px -60px -66px 40px 40px 169px 162px '../img/sprite.png' 'streamline';
@spritesheet-width: 169px;
@spritesheet-height: 162px;
@spritesheet-image: '../img/sprite.png';
@spritesheet-sprites: @-phone @discoball @left @mask @right @sexy @streamline;
@spritesheet: 169px 162px '../img/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/

.icon {
  display: inline-block;
}
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
